When would you want to use a remote repository rather 
than keeping all your work local?

	    When I work in a colaborative way with other programmers.
	    And if i could something cool for anyone to share and so they can make their own versions.
	    And if i have no acces to my own computer and I need to make some changes ASAP to my project.

Why might you want to always pull changes manually rather 
than having Git automatically stay up-to-date 
with your remote repository?

		Guess that is better have the last operational version on github since it is public. 
		I don't know I, think it is little subjective. If I have two computers and I make changes over the weekend or at night. so in the monday morning at office i would need that work ...So I have to make the push even if that version is not operational.



Describe the differences between forks, clones, and branches. 
When would you use one instead of another?


		Forks.- It is a special kind of clone but in the context of GitHub
		Clones.-It is when a copy of a commit history is made to the local computer through git
		Branches.-Is a point where we can make changes that are proof of concept and maybe not part of the final version or at least at the moment. I guess it is a special kind of clone. 



What is the benefit of having a copy of the last known state 
of the remote stored locally?

		This way I can spot any change made by any colaborator over a repository while I'm off line.
		Guess then that is a good practice if thats gonna be the case that I update my local repository (origin/master) through a pull or push OR WITH A FETCH (that will update all of the local copies of every branch for the origin remote) so I go off line. When I come back I will use the merge command.

		With this command I will have a new updated origin/master with the changes made in GitHub and it will be merged with the changes I do wile offline locally in master, surely there will be merge conflicts that will be resolved manually.

		git pull origin master   ====     git fetch origin
		                                  git merge master origin/master


		Inspect local copies   ==== git log origin/master
		                            git diff origin/master master



	

